<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>生活、學習紀錄</title>
    <link>https://chuni-lin.github.io/</link>
    <description>Recent content on 生活、學習紀錄</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-tw</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Mon, 23 Nov 2020 21:29:07 +0800</lastBuildDate><atom:link href="https://chuni-lin.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>What Is Event Loop?</title>
      <link>https://chuni-lin.github.io/posts/2020/11/what-is-event-loop/</link>
      <pubDate>Mon, 23 Nov 2020 21:29:07 +0800</pubDate>
      
      <guid>https://chuni-lin.github.io/posts/2020/11/what-is-event-loop/</guid>
      <description>究竟什麼是 event loop？ Event loop 就字面上的意思來解釋就是「事件圈」。用我的理解來說就是事件的發生順序。但在 JavaScript 中，事件的發生順序卻與我們所以為的有那麼一點不同。而這也就是這篇筆記的主旨，讓我們來好好來了解究竟 event loop 是如何發生在 JavaScript 執行程序中的。進入正題之前，先來認識幾個有點陌生的單字。
名詞解釋 單執行緒（Single-Threaded） JavaScript 是單執行緒的程式語言，白話來說就是由上而下一行一行地執行、一次只做一件事。
堆疊區（Stack） JavaScript 會將執行的程式放到 stack 中，代表他目前正處理到哪個段落。如下圖所示，JavaScript 會放到 stack 中，然後一行一行地執行。而執行到 return 時，他會直接脫離堆疊。  圖片來源
 事件佇列（Task Queue, Callback Queue） 有一些無法預期什麼時候會被執行的操作，像是 setTimeout、event 監聽器、Ajax，在 JavaScript 中都會以非同步的方式被處理。也就是先被放到事件佇列，等到同步執行的程式碼執行完，再回過頭來處理那些被放到佇列中的任務。  圖片來源
 所以，到底什麼是 event loop？ JavaScript 在執行程式的順序是這樣的：
 將函式放到堆疊區（Stack）中 如果有非同步的處理程式，例如上述的 setTimeout、event 監聽器、Ajax，會先被放到事件佇列(Callback Queue) 等到堆疊區（Stack）中執行完畢後，再將事件佇列(Callback Queue)中等待執行的任務丟到堆疊區（Stack）中 執行完堆疊區（Stack）中的任務後，再回到事件佇列(Callback Queue)查看是否還有任務要做   [color=#E53A40]這個過程就是 event loop！ [color=#E53A40]第 3 步驟是我們下一步解題的關鍵，多閱讀幾次，放到你心中。
 拆解 setTimeout 函式的謎題 用範例會更好理解，首先我們輸入：</description>
    </item>
    
    <item>
      <title>Alpha Camp 學期 2-1 學習心得</title>
      <link>https://chuni-lin.github.io/posts/2020/11/alpha-camp-%E5%AD%B8%E6%9C%9F-2-1-%E5%AD%B8%E7%BF%92%E5%BF%83%E5%BE%97/</link>
      <pubDate>Sun, 22 Nov 2020 14:16:53 +0800</pubDate>
      
      <guid>https://chuni-lin.github.io/posts/2020/11/alpha-camp-%E5%AD%B8%E6%9C%9F-2-1-%E5%AD%B8%E7%BF%92%E5%BF%83%E5%BE%97/</guid>
      <description>為什麼開始寫網頁？ 在工作中偶然有機會要製作一個網頁，當時由於經費的問題，必須自己搞定這個任務。於是就從一本厚重的 HTML、CSS 書籍開始，從學習到刻出一個靜態頁面。當時是在 wordpress 平台上操作，所以基本上不需要太多深入的技巧，頂多改動一下 CSS。不過就因為這次的經驗，讓我對「寫網頁」這件事有了興趣，後來持續自己精進，在某一次的產品計畫中提出希望能自己做出這個產品的 Brand Page。然後從伺服器開始，一直到客戶端的整個過程，使用 Google 大神的資訊漸漸把知識拼圖拼起來。後來發現有 Bootstrap 這個能夠快速拼出網頁模版的平台，一邊使用內建的功能，一邊加入自己的 CSS，終於把一個完整的品牌頁面刻出來。那時候的成就感真是像潮水湧出。
為什麼想學習 JS？ 在跳進這個坑之後，發現原來這是個很深很深看不到最下面的坑。開始開啟開發者工具去看喜歡的網頁的程式碼，試著去理解他的邏輯，然後也想做出跟他一樣的互動效果。結果發現原來這都需要 JS。用 CSS 或許也可以做出動畫效果，但要真正的與使用者互動，非 JS 莫屬。與 HTML、CSS 不同，JS 是一個程式語言，他較為複雜的邏輯概念讓我無法有效率地自己學習，但我想讓品牌網頁更有互動性、更完整，於是我開始尋找線上課程。
所以學了幾個月，有什麼感受？ 我是在學完學期 2-2 才回過頭來做這個 review，原因是當時學完 2-1 時，對 JS 只有初步的了解，沒有一個宏觀、完整的認識，所以無法整理出太多內化的知識。在跑過 API、DOM 及前端使用者體驗後，從一開始覺得這是一個很難理解的程式語言，到現在開始發現他的趣味所在。原本我猜想要學會 JS，大概數學、邏輯能力要很好，後來發現其實不盡然如此。當然在一開始不習慣要如何去思考它時，會顯得自己很笨拙，但跟著課程循序漸進地拆解後，才發現真正重要的，不是「有沒有解題的能力」，而是「如何去思考它運作的能力。」這再次向我說明了，邏輯是要柔軟去對待而不是用死背來應付的。你可以背很多語法，但當你沒掌握到整個撰寫程式的思考脈絡時，你會發現語法就只是語法，而不是解決問題的工具。JS 真的是一門博大精深的語言，有很多可以探索的部分，當你在拆解每一個步驟時，都可以感受到設計者在 JS 引擎上所做的巧思。</description>
    </item>
    
    <item>
      <title>關於本站</title>
      <link>https://chuni-lin.github.io/about/</link>
      <pubDate>Wed, 28 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://chuni-lin.github.io/about/</guid>
      <description>讓自己能更了解如何與電腦溝通 這個部落格主要用來存放一些學習程式技術的雜記，偶爾可能也會有少許生活的紀錄。希望之後遇到問題時可以回到這裡尋找答案，也期許能幫助到遇到同樣問題的夥伴。
這裡沒有精深高妙的文字，只有純粹的語言表達。讓自己能更了解與電腦溝通的奧妙。</description>
    </item>
    
  </channel>
</rss>
